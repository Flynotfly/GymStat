name: Deploy to production

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Determine new version
        id: version
        run: |
          if [ -f VERSION ]; then
              base_version=$(cat VERSION)
          else
              echo "VERSION file not found, defaulting to 0.0"
              base_version="0.0"
          fi
          echo "Base version: $base_version"
          latest=$(git tag --list "v${base_version}.*" --sort=-v:refname | head -n 1)
          if [ -z "$latest" ]; then
              new_version="v${base_version}.0"
          else
              patch=$(echo "$latest" | awk -F. '{print $3}')
              new_patch=$((patch+1))
              new_version="v${base_version}.${new_patch}"
          fi
          echo "New version is: $new_version"
          echo "::set-output name=new_version::$new_version"

  build-web:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: gymstat
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/gymstat-web:${{ needs.version.outputs.new_version }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gymstat-web:cache
          cache-to: type=inline

  build-nginx:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/nginx.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/gymstat-nginx:${{ needs.version.outputs.new_version }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/gymstat-nginx:cache
          cache-to: type=inline

  deploy:
    needs: [build-web, build-nginx, version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Create and push git tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.version.outputs.new_version }}
          git push origin ${{ needs.version.outputs.new_version }}

      - name: Create .env file
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "TAG=${{ needs.version.outputs.new_version }}" >> .env
          cat .env

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create remote directories for deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ~/deploy/config/uwsgi"

      - name: Upload files to server
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/deploy/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" .env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/deploy/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" config/uwsgi/uwsgi.ini ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/deploy/config/uwsgi/

      - name: Deploy new version
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd ~/deploy
            docker-compose pull
            docker-compose up -d
          EOF
